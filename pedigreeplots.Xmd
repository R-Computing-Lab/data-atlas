---
title: "pedplots"
author: "Mason Garrison"
date: "`r format(Sys.time(), '%B %d %Y')`"
output:
  html_document: default
  github_document: default
editor_options: 
  markdown: 
    wrap: sentence
---


```{r}
# v1
library(ggplot2)
library(dplyr)

plot_pedigree_ggplot <- function(pedigree, affected = NULL, status = NULL) {
  # Example data preparation
  individuals <- data.frame(
    id = pedigree$id,
    x = runif(length(pedigree$id)),  # Random placement, needs proper computation
    y = runif(length(pedigree$id)),
    sex = factor(pedigree$sex, levels = c(1, 2), labels = c("Male", "Female")),
    affected = ifelse(is.null(affected), 0, affected),
    status = ifelse(is.null(status), 0, status)
  )

  # Set up the basic ggplot
  p <- ggplot(individuals, aes(x = x, y = y)) +
    geom_point(aes(color = sex, shape = sex), size = 4) +  # Nodes by sex
    geom_text(aes(label = id), vjust = -1) +  # Node labels
    theme_minimal()

  # Add affected status if not null
  if (!is.null(affected)) {
    p <- p + geom_point(aes(fill = factor(affected)), shape = 21)
  }

  # Typically you would compute parent-child and spouse connections separately

  # Example of adding parent-child connections
   connections <- data.frame(
       x = c(rep(individuals$x[1], 2), rep(individuals$x[2], 2)),
       y = c(rep(individuals$y[1], 2), rep(individuals$y[2], 2)),
       xend = c(individuals$x[3], individuals$x[4], individuals$x[5], individuals$x[6]),
       yend = c(individuals$y[3], individuals$y[4], individuals$y[5], individuals$y[6])
   )
   p <- p + geom_segment(data = connections, aes(xend = xend, yend = yend), arrow = arrow())

  # Final adjustments and plot return
  p + labs(title = "Pedigree Chart") + coord_fixed()
}

# Example usage:
 ped_data <- data.frame(id = 1:10, father = c(NA, 1, 1, 3, 3, 5, 5, NA, 8, 8),
                        mother = c(NA, 2, 2, 4, 4, 6, 6, NA, 9, 9),
                       sex = c(1, 2, 1, 2, 1, 2, 1, 1, 2, 1),
                        stringsAsFactors = FALSE)
 plot_pedigree_ggplot(ped_data)

```



```{r}
library(ggplot2)
library(dplyr)

# Function to compute generational levels and horizontal positions
compute_positions <- function(ped) {
  ped <- ped %>%
    mutate(parent = pmax(father, mother, na.rm = TRUE)) %>%
    replace_na(list(parent = 0)) %>%
    arrange(parent) %>%
    mutate(generation = ifelse(parent == 0, 1, NA))

  # Propagate generational levels
  max_gen <- max(ped$generation, na.rm = TRUE)
  while(any(is.na(ped$generation))) {
    ped <- ped %>%
      left_join(ped %>% select(id, generation), by = c("parent" = "id")) %>%
      mutate(generation = ifelse(is.na(generation.x), generation.y + 1, generation.x)) %>%
      select(-generation.x, -generation.y)
    max_gen <- max_gen + 1
    if (max_gen > nrow(ped)) break  # Prevent infinite loops
  }

  # Assign initial x positions (naive approach)
  ped <- ped %>%
    group_by(generation) %>%
    mutate(x = row_number())

  # Refine x positions by aligning to the average parent x position
  for (gen in 2:max(ped$generation)) {
    parent_positions <- ped %>%
      filter(generation == gen - 1) %>%
      select(id, x)

    child_positions <- ped %>%
      filter(generation == gen) %>%
      mutate(parent_x = map_dbl(parent, ~mean(parent_positions$x[parent_positions$id == .], na.rm = TRUE)))

    ped <- ped %>%
      mutate(x = if_else(generation == gen, child_positions$parent_x, x))
  }

  ped
}

# Main plotting function
plot_pedigree_ggplot <- function(pedigree) {
  # Compute positions
  positions <- compute_positions(pedigree)

  # Set up the ggplot
  p <- ggplot(positions, aes(x = x, y = -generation)) +
    geom_point(aes(color = as.factor(sex)), size = 4) +
    geom_text(aes(label = id), vjust = 1.5, size = 3) +
    labs(color = "Sex") +
    theme_minimal() +
    theme(axis.title.y = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank())
  
   connections <- data.frame(
       x = c(rep(individuals$x[1], 2), rep(individuals$x[2], 2)),
       y = c(rep(individuals$y[1], 2), rep(individuals$y[2], 2)),
       xend = c(individuals$x[3], individuals$x[4], individuals$x[5], individuals$x[6]),
       yend = c(individuals$y[3], individuals$y[4], individuals$y[5], individuals$y[6])
   )
   p <- p + geom_segment(data = connections, aes(xend = xend, yend = yend), arrow = arrow())

  p
}

# Example data
ped_data <- data.frame(
  id = 1:10,
  father = c(NA, 1, 1, 3, 3, 5, 5, NA, 8, 8),
  mother = c(NA, 2, 2, 4, 4, 6, 6, NA, 9, 9),
  sex = c(1, 2, 1, 2, 1, 2, 1, 1, 2, 1),
  stringsAsFactors = FALSE
)

# Plot
plot_pedigree_ggplot(ped_data)
```

```{r}

library(ggplot2)
library(dplyr)

# Function to compute generational levels and horizontal positions
compute_positions <- function(ped) {
    ped <- ped %>%
        mutate(parent = pmax(father, mother, na.rm = TRUE)) %>%
        replace_na(list(parent = 0)) %>%
        arrange(parent) %>%
        mutate(generation = ifelse(parent == 0, 1, NA))

    # Propagate generational levels
    while(any(is.na(ped$generation))) {
        ped <- ped %>%
            left_join(ped %>% select(id, generation), by = c("parent" = "id")) %>%
            mutate(generation = ifelse(is.na(generation.x), generation.y + 1, generation.x)) %>%
            select(-generation.x, -generation.y)
    }

    # Assign initial x positions (naive approach)
    ped <- ped %>%
        group_by(generation) %>%
        mutate(x = row_number())

    ped
}

# Main plotting function
plot_pedigree_ggplot <- function(pedigree, affected = NULL, status = NULL) {
    # Compute positions
    positions <- compute_positions(pedigree)

    # Adjust data frame to include positions
    pedigree <- pedigree %>%
        left_join(positions, by = "id") %>%
        mutate(sex = factor(sex, levels = c(1, 2), labels = c("Male", "Female")),
               affected = ifelse(is.null(affected), 0, affected),
               status = ifelse(is.null(status), 0, status))

    # Create connections based on parent-child relationships
    connections <- pedigree %>%
        select(id, x, y, father, mother) %>%
        gather(key = "parent_type", value = "parent_id", father, mother) %>%
        filter(!is.na(parent_id)) %>%
        left_join(pedigree %>% select(id, x, y), by = c("parent_id" = "id")) %>%
        rename(xend = x, yend = y) %>%
        left_join(pedigree %>% select(id, x, y), by = c("id" = "id")) %>%
        select(id, x, y, xend, yend)

    # Set up the basic ggplot
    p <- ggplot(pedigree, aes(x = x, y = -generation)) +
        geom_point(aes(color = sex, shape = sex), size = 4) +  # Nodes by sex
        geom_text(aes(label = id), vjust = -1) +  # Node labels
        geom_segment(data = connections, aes(xend = xend, yend = yend), arrow = arrow(length = unit(0.03, "inches"))) +
        theme_minimal()

    # Add affected status if not null
    if (!is.null(affected)) {
        p <- p + geom_point(aes(fill = factor(affected)), shape = 21)
    }

    # Final adjustments and plot return
    p + labs(title = "Pedigree Chart") + coord_fixed()
}

# Example usage with your existing `ped_data`
plot_pedigree_ggplot(ped_data)

```


```{r}

library(ggplot2)

plot_pedigree_ggplot <- function(pedigree) {
    # Assume pedigree includes id, x, y, father_id, mother_id, sex, generation
    # Convert factors to numeric for plotting efficiency if they are not already
    pedigree$sex <- as.numeric(factor(pedigree$sex))
    
    # Create connections for fathers and mothers directly using vectorized operations
    if (!is.na(pedigree$father_id)) {
        father_connections <- pedigree[pedigree$id %in% pedigree$father_id, ]
        names(father_connections)[names(father_connections) == "x"] <- "xend"
        names(father_connections)[names(father_connections) == "y"] <- "yend"
        father_connections <- merge(pedigree, father_connections, by.x = "father_id", by.y = "id")
    } else {
        father_connections <- data.frame()
    }

    if (!is.na(pedigree$mother_id)) {
        mother_connections <- pedigree[pedigree$id %in% pedigree$mother_id, ]
        names(mother_connections)[names(mother_connections) == "x"] <- "xend"
        names(mother_connections)[names(mother_connections) == "y"] <- "yend"
        mother_connections <- merge(pedigree, mother_connections, by.x = "mother_id", by.y = "id")
    } else {
        mother_connections <- data.frame()
    }
    
    connections <- rbind(father_connections, mother_connections)

    # Prepare plot
    p <- ggplot() +
        geom_segment(data = connections, aes(x = x, y = -y, xend = xend, yend = -yend), 
                     arrow = arrow(length = unit(0.02, "npc"))) +
        geom_point(data = pedigree, aes(x = x, y = -generation, color = as.factor(sex)), size = 4) +
        geom_text(data = pedigree, aes(x = x, y = -generation, label = id), vjust = -1, size = 3) +
        scale_color_manual(values = c("blue", "red")) +  # Assuming 1 = Male, 2 = Female
        theme_minimal() +
        labs(title = "Pedigree Chart") +
        coord_fixed(ratio = 1)  # Ensuring aspect ratio is 1:1 for better spatial representation

    return(p)
}

# Example data (simplified for demonstration)
ped_data <- data.frame(
  id = 1:10,
  father_id = c(NA, 1, 1, 3, 3, 5, 5, NA, 8, 8),
  mother_id = c(NA, 2, 2, 4, 4, 6, 6, NA, 9, 9),
  sex = c("M", "F", "M", "F", "M", "F", "M", "M", "F", "M"),
  generation = c(1, 2, 2, 3, 3, 3, 3, 1, 2, 2),
  x = 1:10,  # Example x coordinates
  y = c(1, 2, 2, 3, 3, 3, 3, 1, 2, 2)  # Example y coordinates, should be calculated properly
)

# Plot
ped_plot <- plot_pedigree_ggplot(ped_data)
print(ped_plot)

```


```{r}
library(ggplot2)

plot_pedigree_ggplot <- function(pedigree) {
    # Convert factors to numeric for plotting efficiency if they are not already
    pedigree$sex <- as.numeric(factor(pedigree$sex))
    
    # Initialize an empty data frame for connections
    connections <- data.frame(x = numeric(), y = numeric(), xend = numeric(), yend = numeric())

    # Check and create connections for fathers
    if (any(!is.na(pedigree$father_id))) {
        father_connections <- pedigree[pedigree$father_id %in% pedigree$id,]
        father_connections <- merge(pedigree, father_connections, by.x = "father_id", by.y = "id", suffixes = c("", "_end"))
        connections <- rbind(connections, father_connections[,c("x", "y", "x_end", "y_end")])
    }

    # Check and create connections for mothers
    if (any(!is.na(pedigree$mother_id))) {
        mother_connections <- pedigree[pedigree$mother_id %in% pedigree$id,]
        mother_connections <- merge(pedigree, mother_connections, by.x = "mother_id", by.y = "id", suffixes = c("", "_end"))
        connections <- rbind(connections, mother_connections[,c("x", "y", "x_end", "y_end")])
    }

    # Prepare plot
    p <- ggplot() +
        geom_segment(data = connections, aes(x = x, y = -y, xend = x_end, yend = -y_end),
                     arrow = arrow(length = unit(0.02, "npc"))) +
        geom_point(data = pedigree, aes(x = x, y = -y, color = as.factor(sex)), size = 4) +
        geom_text(data = pedigree, aes(x = x, y = -y, label = id), vjust = -1, size = 3) +
        scale_color_manual(values = c("blue", "red")) +  # Assuming 1 = Male, 2 = Female
        theme_minimal() +
        labs(title = "Pedigree Chart") +
        coord_fixed(ratio = 1)  # Ensuring aspect ratio is 1:1 for better spatial representation

    return(p)
}

# Example data (simplified for demonstration)
ped_data <- data.frame(
  id = 1:10,
  father_id = c(NA, 1, 1, 3, 3, 5, 5, NA, 8, 8),
  mother_id = c(NA, 2, 2, 4, 4, 6, 6, NA, 9, 9),
  sex = c("M", "F", "M", "F", "M", "F", "M", "M", "F", "M"),
  generation = c(1, 2, 2, 3, 3, 3, 3, 1, 2, 2),
  x = 1:10,  # Example x coordinates
  y = c(1, 2, 2, 3, 3, 3, 3, 1, 2, 2)  # Example y coordinates, should be calculated properly
)

# Plot
ped_plot <- plot_pedigree_ggplot(ped_data)
print(ped_plot)

```
