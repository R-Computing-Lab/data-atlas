[["index.html", "Data Atlas Abstract", " Data Atlas S. Mason Garrison 2024-06-18 Abstract The adage ‘A picture is worth a thousand words’ is just as applicable to Behavior Genetics as it is to journalism. In this talk, I delve into the rich diverse history of data visualization techniques in the field of behavior genetics, tracing advancements from Wright’s (Wright 1920) classic path diagram of guinea pigs to the contemporary usage of Manhattan plots. This survey sets the stage for the development of two resources aimed at bolstering the field’s visualization toolkit. The first, an atlas employing ‘ggplot2’ in R, aims to guide researchers in selecting the most appropriate visualization techniques for their data. The second, a proposed R package, seeks to facilitate the integration of ‘OpenMx’-compatible visualizations, streamlining the presentation of complex genetic analyses. Emphasizing practical advice, the talk will cover effective uses of path diagrams, family trees, and interaction visualizations, with the goal of improving clarity and interpretability of genetic data. This initiative aspires to democratize advanced data visualization tools, making them more accessible to the behavior genetics community and, in turn, amplifying the impact and reach of its research. "],["preface.html", "Preface How to use these notes", " Preface In the dynamic field of behavior genetics, the ability to visualize complex data clearly and effectively is not just a technical skill but a narrative art. This document, accompanying the talk on the historical and innovative approaches to data visualization in behavior genetics, introduces the fundamentals of employing ggplot2, a powerful and versatile package in R for creating quality graphics. ggplot2 is part of the tidyverse, an opinionated collection of R packages designed for data science that share an underlying design philosophy, grammar, and data structures. At the heart of ggplot2 is the concept of a layered grammar of graphics, which allows users to create graphics in a step-by-step, clear and logical way. This framework not only simplifies plotting complex data but also encourages a deeper understanding of the graphical representation itself—making it an ideal tool for behavior geneticists seeking to unvail the hidden stories within their data. The Data Atlas presented here is designed to serve as a practical guide through the landscape of data visualization techniques specific to the field of behavior genetics. It offers a curated selection of graphical methods that range from the foundational, such as Wright’s classic path diagrams, to the advanced, like the interaction visualizations and Manhattan plots, which have become indispensable in the modern geneticist’s toolkit. Further, this document and the accompanying talk address the development of an innovative R package tailored to integrate with OpenMx and BGmisic, projects aimed at facilitating advanced statistical modeling of complex genetic data. This package is proposed to enhance the ggplot2 environment, making it more conducive to the specialized needs of behavior genetics research—such as the visualization of path diagrams and family trees that are not only informative but are also aesthetically compelling. As we proceed, this introduction will delve into the specifics of ggplot2 usage in R, demonstrating how this tool can be adapted to meet the unique challenges of visualizing behavioral and genetic data. By bridging the gap between traditional methods and contemporary demands, the resources developed aim to democratize advanced data visualization tools, thereby expanding the accessibility and impact of behavior genetics research. How to use these notes To navigate these notes, use the table of contents on the left side of the screen. You can open or close the table of contents using the hamburger icon (horizontal bars) at the top of the document. Additionally, there are other icons at the top of the document for searching within the text, and for adjusting the size, font, or color scheme of the page. The document will be updated unpredictably. "],["attribution.html", "Attribution Major Attributions", " Attribution These notes lean heavily on other peoples’ materials and ideas. I have done my best to document the origin of the materials and ideas. In particular, I have noted people whose work has been a major contribution as well as those who have additional contributions. You can see specific changes by examining the edit history on the git repo Major Attributions Jenny Bryan’s (jennybryan.org) STAT 545 and Happy Git with R; Mason Garrison’s PSY 720 Data Science for Psychologists "],["license.html", "License", " License This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. This information is a human-readable summary of (and not a substitute for) the license. Please see https://creativecommons.org/licenses/by-sa/4.0/legalcode for the full legal text. You are free to: Share—copy and redistribute the material in any medium or format Remix—remix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: Attribution—You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. ShareAlike—If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictions—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. Notices: You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. "],["colophon.html", "Colophon", " Colophon These notes was written in bookdown inside RStudio. The website is hosted with github. The complete source is available from github. The book style was designed by Desirée De Leon. This version of the notes was built with: ## Finding R package dependencies ... Done! ## setting value ## version R version 4.4.1 (2024-06-14 ucrt) ## os Windows 11 x64 (build 22635) ## system x86_64, mingw32 ## ui RTerm ## language (EN) ## collate English_United States.utf8 ## ctype English_United States.utf8 ## tz America/New_York ## date 2024-06-18 ## pandoc 3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown) Along with these packages: "],["introduction-to-ggplot2.html", "1 Introduction to ggplot2 1.1 Understanding ggplot2’s Grammar of Graphics 1.2 Case Study: Visualizing Twin Data", " 1 Introduction to ggplot2 In this chapter, we explore the power of ggplot2 within the tidyverse package suite for creating compelling visual representations of twin studies in behavior genetics. ggplot2’s layer-oriented approach to building data visualizations allows researchers to intuitively map out the complexities inherent in twin data, providing insights that are crucial for both hypothesis testing and exploratory data analysis. 1.1 Understanding ggplot2’s Grammar of Graphics ggplot2 is a powerful data visualization package in R that is part of the tidyverse suite of packages. It is based on the grammar of graphics, a coherent system for describing and building visualizations. The grammar of graphics is based on the idea that a plot can be decomposed into a set of independent components, such as data, aesthetics, and geoms (geometric objects). By combining these components, ggplot2 allows for the creation of complex and informative visualizations that can be easily customized and extended. The structure of the code for plots can be summarized as follows: ggplot(data = [[dataset]], mapping = aes(x = [[x-variable]], y = [[y-variable]])) + geom_xxx() + other options Each component of the plot is added in layers. The ggplot() function initializes the plot, aes() specifies the aesthetic mappings (how variables are mapped to visual properties), and geom_xxx() adds a geometric object (points, lines, bars, etc.) to the plot. Additional layers can be added to further customize the plot, such as labels, titles, and themes. We’ll dive into these soon enough, but first, let’s walk through a simple example to illustrate the basic structure of a ggplot2 plot. 1.2 Case Study: Visualizing Twin Data To make this more concrete, let’s consider an example using twin data on height from the OpenMX package, which is in the twinData data. These 3,808 pairs of twins are from the Australian National Health and Medical Research Council Twin Registry. The dataset contains information on the height, weight, and body mass index (BMI) of twins, along with their zygosity and other demographic information. library(tidyverse) # Load the tidyverse packages library(OpenMx) # Load the OpenMx package library(BGmisc) # Load the BGmisc package library(conflicted) # to handle conflicts conflicted::conflicts_prefer(OpenMx::vech,dplyr::filter) # Resolve conflicts data(twinData) glimpse(twinData) #&gt; Rows: 3,808 #&gt; Columns: 16 #&gt; $ fam &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18… #&gt; $ age &lt;int&gt; 21, 24, 21, 21, 19, 26, 23, 29, 24, 28, 29, 19, 23, 22, 23, 2… #&gt; $ zyg &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #&gt; $ part &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2… #&gt; $ wt1 &lt;int&gt; 58, 54, 55, 66, 50, 60, 65, 40, 60, 76, 48, 70, 51, 53, 58, 4… #&gt; $ wt2 &lt;int&gt; 57, 53, 50, 76, 48, 60, 65, 39, 57, 64, 51, 67, 51, 55, 57, 5… #&gt; $ ht1 &lt;dbl&gt; 1.70, 1.63, 1.65, 1.57, 1.61, 1.60, 1.75, 1.56, 1.76, 1.70, 1… #&gt; $ ht2 &lt;dbl&gt; 1.70, 1.63, 1.68, 1.65, 1.63, 1.57, 1.77, 1.53, 1.77, 1.73, 1… #&gt; $ htwt1 &lt;dbl&gt; 20.1, 20.3, 20.2, 26.8, 19.3, 23.4, 21.2, 16.4, 19.4, 26.3, 2… #&gt; $ htwt2 &lt;dbl&gt; 19.7, 19.9, 17.7, 27.9, 18.1, 24.3, 20.7, 16.7, 18.2, 21.4, 2… #&gt; $ bmi1 &lt;dbl&gt; 21.0, 21.1, 21.0, 23.0, 20.7, 22.1, 21.4, 19.6, 20.7, 22.9, 2… #&gt; $ bmi2 &lt;dbl&gt; 20.9, 21.0, 20.1, 23.3, 20.3, 22.3, 21.2, 19.7, 20.3, 21.4, 2… #&gt; $ cohort &lt;chr&gt; &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;, &quot;young… #&gt; $ zygosity &lt;fct&gt; MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, M… #&gt; $ age1 &lt;int&gt; 21, 24, 21, 21, 19, 26, 23, 29, 24, 28, 29, 19, 23, 22, 23, 2… #&gt; $ age2 &lt;int&gt; 21, 24, 21, 21, 19, 26, 23, 29, 24, 28, 29, 19, 23, 22, 23, 2… I’m going to tidy up the data a bit by renaming the columns and removing some unnecessary columns. I’ll also filter out any rows with missing values in the height columns. I’ve also added a column to represent the sex of the twins and their zygosity. twinData_cleaned &lt;- twinData %&gt;% rename( # Rename columns family = fam, weight_t1 = wt1, weight_t2 = wt2, height_t1 = ht1, height_t2 = ht2, bmi_t1 = bmi1, bmi_t2 = bmi2, age_t1 = age1, age_t2 = age2, heightweight_t1 = htwt1, heightweight_t2 = htwt2) %&gt;% select(-c(# Remove unnecessary columns part, zyg, age_t1, age_t2)) %&gt;% filter(# Remove rows with missing values !is.na(height_t1), !is.na(height_t2)) %&gt;% mutate( # Create new columns sex = case_when(zygosity %in% c(&quot;MZFF&quot;,&quot;DZFF&quot;) ~ &quot;F&quot;, zygosity %in% c(&quot;MZMM&quot;,&quot;DZMM&quot;) ~ &quot;M&quot;, TRUE ~ &quot;OS&quot;), zyg = case_when(zygosity %in% c(&quot;MZFF&quot;,&quot;MZMM&quot;) ~ &quot;MZ&quot;, zygosity %in% c(&quot;DZFF&quot;,&quot;DZMM&quot;,&quot;DZOS&quot;) ~ &quot;DZ&quot;, TRUE ~ NA_character_ )) glimpse(twinData_cleaned) #&gt; Rows: 3,667 #&gt; Columns: 14 #&gt; $ family &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,… #&gt; $ age &lt;int&gt; 21, 24, 21, 21, 19, 26, 23, 29, 24, 28, 29, 19, 23, 22… #&gt; $ weight_t1 &lt;int&gt; 58, 54, 55, 66, 50, 60, 65, 40, 60, 76, 48, 70, 51, 53… #&gt; $ weight_t2 &lt;int&gt; 57, 53, 50, 76, 48, 60, 65, 39, 57, 64, 51, 67, 51, 55… #&gt; $ height_t1 &lt;dbl&gt; 1.70, 1.63, 1.65, 1.57, 1.61, 1.60, 1.75, 1.56, 1.76, … #&gt; $ height_t2 &lt;dbl&gt; 1.70, 1.63, 1.68, 1.65, 1.63, 1.57, 1.77, 1.53, 1.77, … #&gt; $ heightweight_t1 &lt;dbl&gt; 20.1, 20.3, 20.2, 26.8, 19.3, 23.4, 21.2, 16.4, 19.4, … #&gt; $ heightweight_t2 &lt;dbl&gt; 19.7, 19.9, 17.7, 27.9, 18.1, 24.3, 20.7, 16.7, 18.2, … #&gt; $ bmi_t1 &lt;dbl&gt; 21.0, 21.1, 21.0, 23.0, 20.7, 22.1, 21.4, 19.6, 20.7, … #&gt; $ bmi_t2 &lt;dbl&gt; 20.9, 21.0, 20.1, 23.3, 20.3, 22.3, 21.2, 19.7, 20.3, … #&gt; $ cohort &lt;chr&gt; &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;,… #&gt; $ zygosity &lt;fct&gt; MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, … #&gt; $ sex &lt;chr&gt; &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;,… #&gt; $ zyg &lt;chr&gt; &quot;MZ&quot;, &quot;MZ&quot;, &quot;MZ&quot;, &quot;MZ&quot;, &quot;MZ&quot;, &quot;MZ&quot;, &quot;MZ&quot;, &quot;MZ&quot;, &quot;MZ&quot;, … The code structure for our plot would look like this: ggplot(data = twinData_cleaned, mapping = aes(x = height_t1, y = height_t2)) + geom_point() + labs(title = &quot;Height Comparison between Twins&quot;) It would produce a scatter plot comparing the height of twins with the height of twin 1 on the x-axis and the height of twin 2 on the y-axis. 1.2.1 Plot Development Stages Start with the twinData_cleaned data frame ggplot(data = twinData_cleaned) #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis ggplot(data = twinData_cleaned, mapping = aes(x = height_t1)) #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2)) #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. Represent each observation with a point ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2)) + geom_point() #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. Represent each observation with a point, and map zygosity to the color of each point. ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2, color = zyg)) + #&lt;&lt; geom_point() Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. Represent each observation with a point, and map zygosity to the color of each point. Title the plot “Height Comparison between Twins” ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2, color = zyg)) + geom_point() + labs(title = &quot;Height Comparison between Twins&quot;) #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. Represent each observation with a point, and map zygosity to the color of each point. Title the plot “Height Comparison between Twins”, add the subtitle “by zygosity” ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2, color = zyg)) + geom_point() + labs(title = &quot;Height Comparison between Twins&quot;, subtitle = &quot;by zygosity&quot;) #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. Represent each observation with a point, and map zygosity to the color of each point. Title the plot “Height Comparison between Twins”, add the subtitle “by zygosity”, label the x and y axes as “Height of Twin 1 (m)” and “Height of Twin 2 (m)”, respectively ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2, color = zyg)) + geom_point() + labs(title = &quot;Height Comparison between Twins&quot;, subtitle = &quot;by zygosity&quot;, x = &quot;Height of Twin 1 (m)&quot;, y = &quot;Height of Twin 2 (m)&quot;) #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. Represent each observation with a point, and map zygosity to the color of each point. Title the plot “Height Comparison between Twins”, add the subtitle “by zygosity”, label the x and y axes as “Height of Twin 1 (m)” and “Height of Twin 2 (m)”, respectively , label the legend “Zygosity” ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2, color = zyg)) + geom_point() + labs(title = &quot;Height Comparison between Twins&quot;, subtitle = &quot;by zygosity&quot;, x = &quot;Height of Twin 1 (m)&quot;, y = &quot;Height of Twin 2 (m)&quot;, color = &quot;Zygosity&quot;) #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. Represent each observation with a point, and map zygosity to the color of each point. Title the plot “Height Comparison between Twins”, add the subtitle “by zygosity”, label the x and y axes as “Height of Twin 1 (m)” and “Height of Twin 2 (m)”, respectively , label the legend “Zygosity”, and add a caption for the data source. ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2, color = zyg)) + geom_point() + labs(title = &quot;Height Comparison between Twins&quot;, subtitle = &quot;by zygosity&quot;, x = &quot;Height of Twin 1 (m)&quot;, y = &quot;Height of Twin 2 (m)&quot;, color = &quot;Zygosity&quot;, caption = &quot;Source: Australian National Health and Medical Research Council Twin Registry / OpenMx package&quot;) #&lt;&lt; Start with the twinData_cleaned data frame, map twin 1’s height to the x-axis, and and map twin 2’s height to the y-axis. Represent each observation with a point, and map zygosity to the color of each point. Title the plot “Height Comparison between Twins”, add the subtitle “by zygosity”, label the x and y axes as “Height of Twin 1 (m)” and “Height of Twin 2 (m)”, respectively , label the legend “Zygosity”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. ggplot(data = twinData_cleaned, mapping = aes( x = height_t1, y = height_t2, color = zyg)) + geom_point() + labs(title = &quot;Height Comparison between Twins&quot;, subtitle = &quot;by zygosity&quot;, x = &quot;Height of Twin 1 (m)&quot;, y = &quot;Height of Twin 2 (m)&quot;, color = &quot;Zygosity&quot;, caption = &quot;Source: Australian National Health and Medical Research Council Twin Registry / OpenMx package&quot;) + scale_color_viridis_d() #&lt;&lt; "],["welcome-to-ggplot.html", "2 Welcome to ggplot 2.1 math example", " 2 Welcome to ggplot This chapter serves as an in-depth guide for visualizing twin study data using ggplot2, a component of the R tidyverse package. By leveraging the flexibility and power of ggplot2, researchers can effectively illustrate the intricate patterns often present in twin study data. 2.1 math example \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] You can also use math in footnotes like this1. We will approximate standard error to 0.0272 where we mention \\(p = \\frac{a}{b}\\)↩︎ \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\]↩︎ "],["descriptives-wide.html", "3 Descriptives (Wide) 3.1 Import Data 3.2 Data Structure 3.3 Summary Statistics 3.4 Frequency Tables 3.5 Plots 3.6 Correlation Matrix", " 3 Descriptives (Wide) 3.1 Import Data We’re going to use the twinData dataset from the OpenMx package. This dataset contains 3,808 pairs of Australian twins on the 12 variables. library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors library(NlsyLinks) library(discord) library(BGmisc) library(OpenMx) ## ## Attaching package: &#39;OpenMx&#39; ## ## The following object is masked from &#39;package:BGmisc&#39;: ## ## vech data(twinData) df &lt;- twinData 3.2 Data Structure class(df) ## [1] &quot;data.frame&quot; glimpse(df) ## Rows: 3,808 ## Columns: 16 ## $ fam &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18… ## $ age &lt;int&gt; 21, 24, 21, 21, 19, 26, 23, 29, 24, 28, 29, 19, 23, 22, 23, 2… ## $ zyg &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ part &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2… ## $ wt1 &lt;int&gt; 58, 54, 55, 66, 50, 60, 65, 40, 60, 76, 48, 70, 51, 53, 58, 4… ## $ wt2 &lt;int&gt; 57, 53, 50, 76, 48, 60, 65, 39, 57, 64, 51, 67, 51, 55, 57, 5… ## $ ht1 &lt;dbl&gt; 1.7000, 1.6299, 1.6499, 1.5698, 1.6099, 1.5999, 1.7500, 1.559… ## $ ht2 &lt;dbl&gt; 1.7000, 1.6299, 1.6799, 1.6499, 1.6299, 1.5698, 1.7698, 1.529… ## $ htwt1 &lt;dbl&gt; 20.0692, 20.3244, 20.2020, 26.7759, 19.2894, 23.4375, 21.2245… ## $ htwt2 &lt;dbl&gt; 19.7232, 19.9481, 17.7154, 27.9155, 18.0662, 24.3418, 20.7476… ## $ bmi1 &lt;dbl&gt; 20.9943, 21.0828, 21.0405, 23.0125, 20.7169, 22.0804, 21.3861… ## $ bmi2 &lt;dbl&gt; 20.8726, 20.9519, 20.1210, 23.3043, 20.2583, 22.3454, 21.2270… ## $ cohort &lt;chr&gt; &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;, &quot;younger&quot;, &quot;young… ## $ zygosity &lt;fct&gt; MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, MZFF, M… ## $ age1 &lt;int&gt; 21, 24, 21, 21, 19, 26, 23, 29, 24, 28, 29, 19, 23, 22, 23, 2… ## $ age2 &lt;int&gt; 21, 24, 21, 21, 19, 26, 23, 29, 24, 28, 29, 19, 23, 22, 23, 2… df &lt;- df %&gt;% mutate(sex = case_when(zygosity %in% c(&quot;MZFF&quot;,&quot;DZFF&quot;) ~ &quot;F&quot;, zygosity %in% c(&quot;MZMM&quot;,&quot;DZMM&quot;) ~ &quot;M&quot;, TRUE ~ &quot;OS&quot;), zyg = case_when(zygosity %in% c(&quot;MZFF&quot;,&quot;MZMM&quot;) ~ &quot;MZ&quot;, zygosity %in% c(&quot;DZFF&quot;,&quot;DZMM&quot;,&quot;DZOS&quot;) ~ &quot;DZ&quot;, TRUE ~ NA_character_ )) 3.3 Summary Statistics 3.3.1 Numeric Variables # Calculate summary statistics summary_stats &lt;- df %&gt;% summarise(across(where(is.numeric), list( mean = ~mean(., na.rm = TRUE), sd = ~sd(., na.rm = TRUE), median = ~median(., na.rm = TRUE), IQR = ~IQR(., na.rm = TRUE) ), .names = &quot;{col}_{fn}&quot;)) %&gt;% pivot_longer( cols = everything(), names_to = c(&quot;variable&quot;, &quot;statistic&quot;), names_sep = &quot;_&quot; ) %&gt;% pivot_wider( names_from = statistic, values_from = value ) summary_stats ## # A tibble: 13 × 5 ## variable mean sd median IQR ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 fam 1904. 1099. 1904. 1904. ## 2 age 34.5 14.2 30 19 ## 3 part 1.93 0.265 2 0 ## 4 wt1 62.2 10.9 60 15 ## 5 wt2 65.6 12.2 65 16 ## 6 ht1 1.66 0.0896 1.65 0.130 ## 7 ht2 1.69 0.0990 1.7 0.140 ## 8 htwt1 22.5 3.16 21.9 3.84 ## 9 htwt2 22.8 3.19 22.3 3.78 ## 10 bmi1 21.7 0.940 21.6 1.21 ## 11 bmi2 21.8 0.939 21.7 1.18 ## 12 age1 34.5 14.2 30 19 ## 13 age2 34.5 14.2 30 19 3.4 Frequency Tables # Counting &#39;zygosity&#39; and calculating percentages zygosity_summary &lt;- df %&gt;% count(zyg, name = &quot;count&quot;) %&gt;% mutate(percentage = count / sum(count) * 100) %&gt;% rename(category = zyg) %&gt;% # Renaming the column for clarity mutate(variable = &quot;zygosity&quot;) # Adding a descriptor column for the variable # Counting &#39;sex&#39; and calculating percentages sex_summary &lt;- df %&gt;% count(sex, name = &quot;count&quot;) %&gt;% mutate(percentage = count / sum(count) * 100) %&gt;% rename(category = sex) %&gt;% # Renaming the column for clarity mutate(variable = &quot;sex&quot;) # Adding a descriptor column for the variable # Combining both summaries into a single dataframe combined_summary &lt;- bind_rows(zygosity_summary, sex_summary) %&gt;% select(variable, category, everything()) # Reordering columns for clarity combined_summary ## variable category count percentage ## 1 zygosity DZ 2009 52.75735 ## 2 zygosity MZ 1799 47.24265 ## 3 sex F 1983 52.07458 ## 4 sex M 919 24.13340 ## 5 sex OS 906 23.79202 What if you want to examine effects by cohort? You can use the group_by function to group the data by cohort and then calculate the summary statistics for each cohort. library(tidyverse) # Grouping by &#39;cohort&#39; and calculating summary statistics for each group across values that are numeric df_summary &lt;- df %&gt;% group_by(cohort) %&gt;% summarise(across(where(is.numeric), list( mean = ~mean(., na.rm = TRUE), sd = ~sd(., na.rm = TRUE), median = ~median(., na.rm = TRUE), IQR = ~IQR(., na.rm = TRUE) ), .names = &quot;{.col}_{.fn}&quot;)) %&gt;% # Ensure only statistic columns are being pivoted pivot_longer( cols = -cohort, # Exclude &#39;cohort&#39; from pivoting names_to = c(&quot;variable&quot;, &quot;statistic&quot;), names_sep = &quot;_&quot; ) # lock in the variable order variable_order &lt;- unique(df_summary$variable) df_summary &lt;- df_summary %&gt;% pivot_wider( names_from = statistic, values_from = value, values_fn = list(value = mean) # Aggregate if necessary ) df_summary %&gt;% mutate(variable = factor(variable, levels = variable_order)) %&gt;% arrange(variable, cohort) ## # A tibble: 26 × 6 ## cohort variable mean sd median IQR ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 older fam 2859 548. 2859 949 ## 2 younger fam 955 551. 955 954 ## 3 older age 45.4 12.2 42 19 ## 4 younger age 23.5 3.66 23 7 ## 5 older part 1.95 0.224 2 0 ## 6 younger part 1.92 0.299 2 0 ## 7 older wt1 63.8 11.2 62 15 ## 8 younger wt1 60.5 10.3 59 14 ## 9 older wt2 67.0 12.7 66 19 ## 10 younger wt2 64.1 11.6 64 17 ## # ℹ 16 more rows What about descriptives by zygosity and sex? library(tidyverse) # Grouping by &#39;zyg,sex&#39; and calculating summary statistics for each group df_summary &lt;- df %&gt;% group_by(zyg,sex) %&gt;% summarise(across(where(is.numeric), list( mean = ~mean(., na.rm = TRUE), sd = ~sd(., na.rm = TRUE), median = ~median(., na.rm = TRUE), IQR = ~IQR(., na.rm = TRUE) ), .names = &quot;{.col}_{.fn}&quot;)) %&gt;% # Ensure only statistic columns are being pivoted pivot_longer( cols = -c(zyg,sex), # Exclude &#39;zygosity&#39; from pivoting names_to = c(&quot;variable&quot;, &quot;statistic&quot;), names_sep = &quot;_&quot; ) ## `summarise()` has grouped output by &#39;zyg&#39;. You can override using the `.groups` ## argument. # lock in the variable order variable_order &lt;- unique(df_summary$variable) df_summary &lt;- df_summary %&gt;% pivot_wider( names_from = statistic, values_from = value, values_fn = list(value = mean) # Aggregate if necessary ) df_summary %&gt;% mutate(variable = factor(variable, levels = variable_order)) %&gt;% arrange(variable,zyg,sex) ## # A tibble: 65 × 7 ## # Groups: zyg [2] ## zyg sex variable mean sd median IQR ## &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DZ F fam 2109. 1029. 2891 2048 ## 2 DZ M fam 2144. 1009. 1370. 2042. ## 3 DZ OS fam 2509. 980. 1852. 1956. ## 4 MZ F fam 1338. 992. 1956. 1956. ## 5 MZ M fam 1750. 1010. 2583 2013 ## 6 DZ F age 35.4 14.3 32 20 ## 7 DZ M age 32.3 13.9 28 16 ## 8 DZ OS age 32.9 13.9 28 17 ## 9 MZ F age 35.7 14.3 32 21 ## 10 MZ M age 34.4 14.1 31 18 ## # ℹ 55 more rows 3.5 Plots Histograms and scatter plots to visualize distributions and relationships. ggplot(df, aes(x = wt1)) + geom_histogram(bins=30, fill=&quot;blue&quot;, color=&quot;black&quot;) + labs(x=&quot;weight&quot;, y=&quot;Frequency&quot;, title=&quot;Distribution of weight for Twin 1&quot;) + theme_minimal() ## Warning: Removed 97 rows containing non-finite outside the scale range ## (`stat_bin()`). # Basic Scatter Plot of weight of Twin 1 vs. weight of Twin 2 p &lt;- ggplot(df, aes(x=wt1, y=wt2, color=zyg)) + geom_point(alpha=.5) + labs(x = &quot;Weight of Twin 1&quot;, y = &quot;Weight of Twin 2&quot;, title = &quot;Scatterplot of weight by Zygosity&quot;) + scale_color_viridis_d(option = &quot;virdis&quot;, begin = 0.1,end=.85) + theme_minimal() p ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning: Removed 173 rows containing missing values or values outside the scale range ## (`geom_point()`). Adding a regression line to the scatter plot. p + geom_smooth(method = &quot;lm&quot;, se = FALSE) ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## Warning: Removed 173 rows containing non-finite outside the scale range ## (`stat_smooth()`). ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning: Removed 173 rows containing missing values or values outside the scale range ## (`geom_point()`). library(ggplot2) library(ggExtra) # Create marginal density plots for x and y axes p_x &lt;- ggplot(df, aes(x = wt1, fill = zyg)) + geom_density(alpha = 0.5) + theme_minimal() + scale_fill_viridis_d(option = &quot;viridis&quot;, begin = 0.1, end = 0.85) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) p_x ## Warning: Removed 97 rows containing non-finite outside the scale range ## (`stat_density()`). p_y &lt;- ggplot(df, aes(x = wt2, fill = zyg)) + geom_density(alpha = 0.5) + scale_fill_viridis_d(option = &quot;viridis&quot;, begin = 0.1, end = 0.85) + coord_flip() + theme_minimal() + theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) p_y ## Warning: Removed 86 rows containing non-finite outside the scale range ## (`stat_density()`). # with marginal histogram p1 &lt;- ggMarginal(p, type=&quot;histogram&quot;) ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning: Removed 173 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning: Removed 173 rows containing missing values or values outside the scale range ## (`geom_point()`). p1 # marginal density p2 &lt;- ggMarginal(p, type=&quot;density&quot;) ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning: Removed 173 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning: Removed 173 rows containing missing values or values outside the scale range ## (`geom_point()`). p2 # marginal boxplot p3 &lt;- ggMarginal(p, type=&quot;boxplot&quot;) ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning: Removed 173 rows containing missing values or values outside the scale range ## (`geom_point()`). ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): ## Option &#39;virdis&#39; does not exist. Defaulting to &#39;viridis&#39;. ## Warning: Removed 173 rows containing missing values or values outside the scale range ## (`geom_point()`). p3 3.6 Correlation Matrix # Calculate the correlation matrix "],["applications.html", "4 Applications 4.1 Example one 4.2 Example two", " 4 Applications Some significant applications are demonstrated in this chapter. 4.1 Example one 4.2 Example two "],["final-words.html", "5 Final Words", " 5 Final Words Throughout this document, we have embarked on an exploration of the evolving landscape of data visualization in the field of behavior genetics. By revisiting historical methodologies and embracing modern techniques, we have uncovered a rich tapestry of visual tools that enhance our understanding and communication of genetic data. The atlas of ggplot2 visualizations presented here not only serves as a practical guide but also as an inspiration for researchers to think creatively about how data can be visualized more effectively. "],["references.html", "References", " References Wright, S. 1920. “The Relative Importance of Heredity and Environment in Determining the Piebald Pattern of Guinea-Pigs.” Proceedings of the National Academy of Sciences 6 (6): 320–32. https://doi.org/10.1073/pnas.6.6.320. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
